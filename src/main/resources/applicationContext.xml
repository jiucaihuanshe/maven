<?xml version="1.0" encoding="UTF-8"?>
<beans
    default-lazy-init="default"
    xmlns="http://www.springframework.org/schema/beans" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="  
       http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
       http://www.springframework.org/schema/mvc   
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd   
       http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/data/jpa 
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd"> 
	<!-- Spring AOP编程基本步骤
	1）创建maven项目并添加依赖
	2）添加spring配置文件启用注解配置
	3）创建核心业务接口及实现类
	4）创建业务切面类，定义切入点机增强处理
	5）编写测试类进行测试
	 -->
	
	<!-- 配置组件扫描（将对象包中指定的类交给Spirng管理） -->
    <context:component-scan base-package="practice.com.project"></context:component-scan>
    <!-- 基于XML的AOP配置（代码的侵入比较小，但是灵活性不足）-->
    <aop:config>
    	<!-- 配置切入点（植入扩展业务的那个点）
    		within定义的为一个切入点表达式
    	 -->
    	<aop:pointcut expression="within(practice.com.project.service.HelloServiceImpl)" id="helloPt"/>
    	<!-- 配置切面（横切面） -->
    	<!-- ref 引入已经存在的对象 引用的是对象的名字 -->
    	<aop:aspect ref="loggingAspect">
    		<!-- 配置前置通知（某个业务方法之前执行） -->
    		<aop:before method="beforeMethod" pointcut-ref="helloPt"/>
    		<!-- 配置后置通知（某个业务方法之后执行） -->
    		<aop:after method="endMethod" pointcut-ref="helloPt"/>
    	</aop:aspect>
    </aop:config>
	<!-- 自动扫描该包 
	<context:component-scan base-package="practice.com.project"></context:component-scan>-->
	<!-- 使aspectj注解生效，自动为目标对象生成代理对象
	基于AOP注解的方式配置AOP时，因为注解要应用在类或方法的上面，所以会有一定的
	侵入性。但这种侵入性属于声明式侵入性，所以范畴同样也是属于弱耦合范围之内（强
	耦合一般是在业务代码内部的直接耦合）
	 -->
	<aop:aspectj-autoproxy/>
</beans>